set cursorline
set autoindent
set softtabstop=0 expandtab shiftwidth=4 smarttab
set hlsearch
set completeopt=longest,menuone
set laststatus=2
set statusline=%m<%{winnr()}>\ %f\ %P:%c
"enable project specific .vimrc
set exrc
set secure

filetype plugin on
syntax on

if &diff
    colorscheme elda
    set number norelativenumber
    set noreadonly
    noremap ]x /<<<<<<<<ENTER>
    noremap ]c ]czz
    noremap dgl :diffg LO<ENTER>
    noremap dgr :diffg RE<ENTER>
    noremap dd dd
else
    colorscheme abstract-mod
    set number relativenumber
    set foldcolumn=2
    "make active window obvious
    augroup ActiveWindow
        autocmd!
        autocmd WinEnter,TabEnter * set relativenumber
        autocmd WinLeave,TabLeave * set norelativenumber
        autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
        autocmd WinLeave * setlocal nocursorline
    augroup END
    augroup SaveSessionView
        autocmd!
        " save view
        autocmd BufWinLeave *.* mkview
        autocmd BufWinEnter *[^*.txt.gpg] silent loadview
        "save session
        autocmd TextChanged,TextChangedI,VimLeave * :silent :mksession!
    augroup END
    augroup other
        autocmd!
        "insert mode visible
        autocmd InsertEnter * set nonumber norelativenumber
        autocmd InsertLeave * set number relativenumber
    augroup END
endif

"disable autoindent when for pasting with F2
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

"tabs
nnoremap <S-Tab> :tabe<Space>
nnoremap <S-Tab><UP> :tabnew<CR>
nnoremap <S-Tab><DOWN> :tabc<CR>
nnoremap <S-Tab><LEFT> :tabp<CR>
nnoremap <S-Tab><RIGHT> :tabn<CR>

nnoremap <Enter> <UP>o<ESC><DOWN>
nnoremap <Space> i <ESC><RIGHT>

nnoremap <C-f> :find ./**/
nnoremap <S-f><S-f> :grep --exclude "*.cfile" --exclude "*.orig" --exclude "Session.vim" -Ir 

nnoremap <Leader>q :qa!<CR>
nnoremap <Leader>Q :only<CR>

nnoremap Q :sh<CR>

nnoremap * *<C-O>:%s///gn<CR>``
nnoremap <silent> /<CR> /;;;;;<CR>

"replacing words
nnoremap <C-g> :%s//gc<LEFT><LEFT><LEFT>
nnoremap <C-h> yiw:%s//gc<LEFT><LEFT><LEFT>\(\<<C-r>0\>\)/
nnoremap <C-h><C-h> yiw:s//g<LEFT><LEFT>\(\<<C-r>0\>\)/
vnoremap <C-h> y:%s//gc<LEFT><LEFT><LEFT>\(<C-r>0\)/

nnoremap n nzz
nnoremap N Nzz
nnoremap gg ggzzzv

"folds
nnoremap <silent> zM :exe ":if &foldlevel \| setlocal foldlevel=0 \| else \| setlocal foldlevel=99 \| endif"<CR>
nnoremap z{ [{zf%

"resize splits
nnoremap <Leader>d :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <Leader>a :exe "vertical resize " . (winwidth(0) * 2/3)<CR>
nnoremap <Leader>w :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <Leader>s :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <Leader><UP> <C-w>+
nnoremap <Leader><DOWN> <C-w>-
nnoremap <Leader><RIGHT> <C-w>>
nnoremap <Leader><LEFT> <C-w><
nnoremap <Leader>= <C-w>=

"switch windows
nnoremap <Leader>; <C-w>w

"continue page in another split
nnoremap <Leader>cv :setlocal nowrap<CR>H<C-w>v:set scb<CR><C-w>w:setlocal nowrap<CR>Ljzt:set scb<CR>

inoremap <Leader>w <C-o>:w<CR>
inoremap jk <ESC>

"autocomplete
inoremap <S-Tab> <C-n>
inoremap <C-l> <C-x><C-l>
inoremap <C-f> <C-x><C-f>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"pathogen
execute pathogen#infect()

"easymotion
function! EMMap()
    map  / <Plug>(easymotion-sn)
    map w <Plug>(easymotion-w)
    map W <Plug>(easymotion-W)
    map E <Plug>(easymotion-E)
    map b <Plug>(easymotion-b)
    map B <Plug>(easymotion-B)
    map f <Plug>(easymotion-f)
    map F <Plug>(easymotion-F)
    map t <Plug>(easymotion-t)
    map T <Plug>(easymotion-T)
endfunction
function! EMUnmap()
    silent! unmap /
    silent! unmap w
    silent! unmap W
    silent! unmap E
    silent! unmap b
    silent! unmap B
    silent! unmap f
    silent! unmap F
    silent! unmap t
    silent! unmap T
endfunction
call EMMap()

