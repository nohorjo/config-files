set nocompatible
set term=screen-256color
set cursorline
set autoindent
set softtabstop=0 expandtab shiftwidth=4 smarttab
set hlsearch
set completeopt=longest,menuone
set laststatus=2
set statusline=%m<%{winnr()}>\ %f\ %P:%c
set scrolloff=3
set complete=.,w,u,b,i
"no text break
set fo-=t
"enable project specific .vimrc
set exrc
set secure

filetype plugin on
syntax on

if &diff
    colorscheme dracula
    set diffopt+=iwhite
    set number norelativenumber
    set noreadonly
    nnoremap ]x /<<<<<<<<ENTER>zt
    nnoremap ]c ]czz
    nnoremap dgl :diffg LO<ENTER>
    nnoremap dgr :diffg RE<ENTER>
    nnoremap dgm ddk/=======<ENTER>V/>>>>>>><ENTER>d
    nnoremap dgt V/=======<ENTER>dk/>>>>>>><ENTER>dd
    nnoremap dl dd<C-w>wdd<C-w>w
    nnoremap dd dd
    augroup UpdateDiff
        autocmd!
        autocmd TextChanged,TextChangedI * diffupdate
    augroup END
else
    colorscheme donbass
    set number relativenumber
    set foldcolumn=2
    "make active window obvious
    augroup ActiveWindow
        autocmd!
        autocmd WinEnter,TabEnter * set relativenumber
        autocmd WinLeave,TabLeave * set norelativenumber
        autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
        autocmd WinLeave * setlocal nocursorline
    augroup END
    augroup SaveSessionView
        autocmd!
        " save view
        autocmd CursorMoved,CursorMovedI * silent! mkview!
        autocmd BufWinEnter *[^*.txt.gpg] silent loadview
        "save session
        autocmd TextChanged,TextChangedI,VimLeave * :silent :mksession!
    augroup END
    augroup other
        autocmd!
        "insert mode visible
        autocmd InsertEnter * set nonumber norelativenumber
        autocmd InsertLeave * set number relativenumber
    augroup END
endif

"disable autoindent when for pasting with F2
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

"tabs
nnoremap <S-Tab> :tabe<Space>
nnoremap <S-Tab><UP> :tabnew<CR>
nnoremap <S-Tab><DOWN> :tabc<CR>
nnoremap <S-Tab><LEFT> :tabp<CR>
nnoremap <S-Tab><RIGHT> :tabn<CR>
nnoremap <S-Tab>o :tabo<CR>

nnoremap <Enter> <UP>o<ESC><DOWN>
nnoremap <Space> i <ESC><RIGHT>

"searching
nnoremap <C-f> :find ./**/
nnoremap <C-f><C-f> yiw:find ./**/<C-r>"
let g:grepexcludes = '--exclude "' . join(["*.cfile", "*.orig", "Session.vim"], '" --exclude "') . '" --exclude-dir "' . join([".git"], '" --exclude-dir "') . '"'
command! -nargs=+ -complete=file Grep call Grep(<f-args>)
function! Grep(...)
    let a = a:000
    let opts = a[0]
    let dir = a[-1]
    let exp = join(a[1:-2], " ")
    execute "grep " . g:grepexcludes . " -Ir" . opts . ' "' . exp . '" ' . dir
endfunction
nnoremap FF :Grep "" 
nnoremap Ff yiw:Grep "" \<<C-r>"\> ./
vnoremap Ff y:Grep F <C-r>" ./

nnoremap <Leader>q :qa!<CR>
nnoremap <Leader>Q :only<CR>

nnoremap Q :sh<CR>

nnoremap * *<C-O>:%s///gn<CR>``
nnoremap <silent> /<CR> /;;;;;<CR>

"replacing words
nnoremap <C-g> :%s//gc<LEFT><LEFT><LEFT>
nnoremap <C-h> yiw:%s//gc<LEFT><LEFT><LEFT>\(\<<C-r>0\>\)/
nnoremap <C-h><C-h> yiw:s//g<LEFT><LEFT>\(\<<C-r>0\>\)/
vnoremap <C-h> y:%s//gc<LEFT><LEFT><LEFT>\(<C-r>0\)/

nnoremap n nzz
nnoremap N Nzz
nnoremap gg ggzzzv

"folds
nnoremap <silent> zM :exe ":if &foldlevel \| setlocal foldlevel=0 \| else \| setlocal foldlevel=99 \| endif"<CR>
nnoremap z{ [{zf%

"switch windows
nnoremap <Leader>; <C-w>w

"continue page in another split
nnoremap <Leader>cv :setlocal nowrap<CR>H<C-w>v:set scb<CR><C-w>w:setlocal nowrap<CR>Ljzt:set scb<CR>

"writes
inoremap <Leader>w <C-o>:w<CR>
inoremap :w<CR> <ESC>:w<CR>

"esc
inoremap jk <ESC>
inoremap kj <ESC>

"autocomplete
inoremap <C-l> <C-x><C-l>
inoremap <C-f> <C-x><C-f>
inoremap <expr> <ENTER> pumvisible() ? "\<C-y>" : "\<CR>"
"esc to quit popup or no op
inoremap <expr> <ESC> pumvisible() ? "\<C-e>" : ""
"let arrows still work
inoremap <ESC>i <ESC>a
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-n>"

"discard line
"inoremap <Leader><BS> <ESC>d0kJ2xi

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"pathogen
execute pathogen#infect()

"easymotion
function! EMMap()
    map / <Plug>(easymotion-sn)
    map w <Plug>(easymotion-w)
    map W <Plug>(easymotion-W)
    map E <Plug>(easymotion-E)
    map b <Plug>(easymotion-b)
    map B <Plug>(easymotion-B)
    map f <Plug>(easymotion-f)
    map F <Plug>(easymotion-F)
    map t <Plug>(easymotion-t)
    map T <Plug>(easymotion-T)
    let g:emmapped = 1
endfunction
function! EMUnmap()
    silent! unmap /
    silent! unmap w
    silent! unmap W
    silent! unmap E
    silent! unmap b
    silent! unmap B
    silent! unmap f
    silent! unmap F
    silent! unmap t
    silent! unmap T
    let g:emmapped = 0
endfunction
call EMMap()
augroup EMBuffs
    autocmd!
    autocmd BufEnter * if line('$') > 3000 | let emmapped_prev = g:emmapped | call EMUnmap() | let g:emmapped = emmapped_prev | endif
    autocmd BufLeave * if g:emmapped | call EMMap() | endif
augroup END
    
command! New tabnew | tabonly

runtime macros/matchit.vim

"{ ... } => { \n\t ... \n }
nnoremap <Leader>{ di{i<CR><CR><ESC>k>>p
vnoremap <Leader>{ di{<CR><TAB><C-r>"<CR><BS>}<ESC>

command! Vsp vsplit %:h
